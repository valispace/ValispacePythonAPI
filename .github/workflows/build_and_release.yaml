####################################################################################
## This workflow automates the build and release process for Valispace            ##
## Python API. Triggered on pushes to the master branch, the workflow             ##
## sets up Python environments for multiple versions (3.9),                       ##
## displays the Python version, installs Twine for package management, builds     ##
## the project using python setup.py bdist_wheel, and releases the distribution   ##
## files to  PyPI using Twine.                                                    ##
####################################################################################

name: Create new Valispace Python API release

on:
  push:
    branches:
      - master
  
env:
  VALIFN_PYTHON_REPO: valifn-python

jobs:
  # Defines pre-checks, will evaluate if a new release is needed
  pre_checks:
    runs-on: ubuntu-latest
    
    # Define variables to share across jobs
    outputs:
      current_version: ${{ steps.get_version.outputs.current_version}}
      skip_action: ${{ steps.check_setup.outputs.skip_action}}

    steps:

      # Project checkout
      - name: Checkout project
        uses: actions/checkout@v4
      
      # Get Valispace Python API version
      - name: Get version
        id: get_version
        run: |
          version=$(grep --extended-regexp "version" "setup.py" | awk -F"'" '{print $2}')
          echo "current_version=$version" >> "$GITHUB_OUTPUT"
      
      # Check if version present on master branch is the same as latest tag
      - name: Check if setup.py was updated
        id: check_setup
        run: |
          latest_tag=$(git describe --tags --abbrev=0 --always)
          current_version=${{ steps.get_version.outputs.current_version }}

          echo "Current version: $current_version"
          echo "Latest tag: $latest_tag"

          if [ "$current_version" == "$latest_tag" ]; then
            echo "Setup.py version is equal to the latest Git tag. Action will be terminated."
            echo "skip_action=True" >> "$GITHUB_OUTPUT"
          else
            echo "Setup.py version is different from the latest Git tag. Action will continue."
            echo "skip_action=False" >> "$GITHUB_OUTPUT"
          fi
        
        shell: bash
  
  # Execute Python API Build and deploy if version present on master branch is different from latest tag
  python_api_build_and_deploy:
    needs: pre_checks
    if: needs.pre_checks.outputs.skip_action == 'false'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    
    steps:

      # Project checkout
      - name: Checkout project
        uses: actions/checkout@v4
      
      # Use python versions defined on strategy.matrix
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Print python version currently in use
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      # Install dependecies used to build Valispace Python API
      - name: Install Dependencies
        run: |
          pip install twine
          pip install wheel
      
      # Build Valispace Python API
      - name: Build project
        run: python setup.py bdist_wheel

      #Upload new version to twine
      - name: Release API on PyPi
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: twine upload dist/*

      # Create new release using the current version
      - name: 'Create new release in GitHub'
        id: release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          commit: '${{ steps.setup.outputs.branch }}'
          tag: '${{ needs.pre_checks.outputs.current_version }}'
          name: '${{ needs.pre_checks.outputs.current_version }}'
          generateReleaseNotes: true
          allowUpdates: true
          prerelease: false
  
  # Bump valispace dependency on valifn repo
  bump_valifn_version:
    needs: ["pre_checks", "python_api_build_and_deploy"]
    if: needs.pre_checks.outputs.skip_action == 'false'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    
    steps:

      # Clone valifn-repo
      - name: Clone valifn-python repository
        id: valifn-python-clone
        uses: actions/checkout@v2
        with:
          repository: valispace/${{ env.VALIFN_PYTHON_REPO }}
          token: ${{ secrets.GH_ACTIONS_REPO_ADMIN_CI_TOKEN }}
          path: ${{ env.VALIFN_PYTHON_REPO }}
          ref: develop
      
      # Setup GitHub Action Account
      - name: Setup Action Account
        working-directory: ${{ env.VALIFN_PYTHON_REPO }}
        shell: bash
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
      
      # Create new branch on valifn repo
      - name: Create a new branch
        working-directory: ${{ env.VALIFN_PYTHON_REPO }}
        shell: bash
        run: |
          git checkout -B bump-api-to-version-${{ needs.pre_checks.outputs.current_version }}
      
      # Bump valispace dependency on valifn repo
      - name: Bump version of valifn-python
        id: valifn-python-bump
        working-directory: ${{ env.VALIFN_PYTHON_REPO }}
        shell: bash
        run: | 
          sed -i "s/valispace==[0-9.]*\.[0-9.]*\.[0-9]*/valispace==${{ needs.pre_checks.outputs.current_version }}/" requirements.txt
      
      # Commit and push version bump
      - name: Commit and push
        working-directory: ${{ env.VALIFN_PYTHON_REPO }}
        shell: bash
        run: |
          git add requirements.txt
          git commit -m "Bump API to version ${{ needs.pre_checks.outputs.current_version }}"
          git push --set-upstream origin bump-api-to-version-${{ needs.pre_checks.outputs.current_version }}
      
      # Create Pull Request template on valifn repo
      - name: Create template for PR
        working-directory: ${{ env.VALIFN_PYTHON_REPO }}
        shell: bash
        run: |
          echo -e "# Changelog\n* Bump API to version ${{ needs.pre_checks.outputs.current_version }}" > changelog.md
      
      # Create Pull Request on valifn repo
      - name: Open Pull Request
        working-directory: ${{ env.VALIFN_PYTHON_REPO }}
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_REPO_ADMIN_CI_TOKEN }}
        run: | 
          gh pr create -B develop -H bump-api-to-version-${{ needs.pre_checks.outputs.current_version }} --title 'Bump API to version ${{ needs.pre_checks.outputs.current_version }}' --body-file changelog.md --reviewer valispace/devops